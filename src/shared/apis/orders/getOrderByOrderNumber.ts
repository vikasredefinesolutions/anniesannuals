import { SendAsync } from '@/shared/utils/axios';
import { _CartItem } from '../cart/fetchCartProducts';

export interface _OrderDetails {
  giftCardWalletAmount: number;
  orderDetails: IProductOrderDetail;
  shoppingCartViewModels: _CartItem[];
  orderTrackLink: string;
}

export interface IProductOrderDetail {
  id: number;
  storeID: number;
  orderGUID: string | null;
  isNew: boolean;
  shoppingCartID: number;
  customerID: number;
  firstName: string;
  lastName: string;
  email: string;
  notes: string;
  giftPackNote: string | null;
  billingEqualsShipping: boolean;
  billingEmail: string;
  billingFirstName: string;
  billingLastName: string;
  billingCompany: string;
  billingAddress1: string;
  billingAddress2: string;
  billingSuite: string;
  billingCity: string;
  billingState: string;
  billingZip: string;
  billingCountry: string;
  billingPhone: string;
  billingFax: string | null;
  shippingEmail: string;
  shippingFirstName: string;
  shippingLastName: string;
  shippingCompany: string;
  shippingAddress1: string;
  shippingAddress2: string;
  shippingSuite: string;
  shippingCity: string;
  shippingState: string;
  shippingZip: string;
  shippingCountry: string;
  shippingPhone: string;
  shippingMethod: string;
  shippingFax: null;
  okToEmail: true;
  cardName: string;
  cardType: string;
  cardNumber: string;
  cardVarificationCode: string;
  cardExpirationMonth: string;
  cardExpirationYear: string;
  couponCode: string;
  couponDiscountAmount: number;
  giftCertiSerialNumber: string;
  giftCardWalletAmount: string;
  giftCertificateDiscountAmount: number;
  quantityDiscountAmount: number;
  levelDiscountPercent: number;
  levelDiscountAmount: number;
  customDiscount: number;
  orderSubtotal: number;
  orderTax: number;
  orderShippingCosts: number;
  orderTotal: number;
  authorizationCode: string;
  authorizationResult: string;
  authorizationPNREF: string;
  transactionCommand: string;
  customerIPAddress: null;
  paymentGateway: string;
  paymentMethod: string;
  shippingTrackingNumber: string | null;
  shippedVIA: string | null;
  orderStatus: string;
  transactionStatus: string;
  avsResult: string;
  cvc2Response: null;
  captureTxCommand: string;
  captureTXResult: string;
  voidTXCommand: string | null;
  voidTXResult: string | null;
  refundTXCommand: string | null;
  refundTXResult: string | null;
  refundReason: string | null;
  cartType: string | null;
  last4: string | null;
  authorizedOn: string;
  capturedOn: string;
  refundedOn: string;
  voidedOn: string;
  fraudedOn: string;
  shippedOn: null;
  orderDate: string;
  deleted: boolean;
  referralLink: string | null;
  referrer: string;
  refundedAmount: number;
  chargeAmount: number;
  authorizedAmount: number;
  adjustmentAmount: number;
  adjustmentCapturedOn: string;
  orderNotes: string;
  isGiftWrap: boolean;
  giftWrapAmt: number;
  salesRepName: string;
  inventoryWasReduced: boolean;
  refOrderID: string;
  isPrinted: boolean;
  isMobileOrder: boolean;
  isPhoneOrder: boolean;
  batchId: number;
  shippingLabelMethod: null;
  shippingLabelFileName: null;
  shippingLabelCost: number;
  shippingLabelWeight1: number;
  shippingLabelPackageHeight: number;
  shippingLabelPackageWidth: number;
  shippingLabelPackageLength: number;
  noOfLabels: number;
  cashReceived: number;
  cashChangedReturned: number;
  bankName: null;
  chequeNumber: null;
  chequeDate: string;
  ccReceiptNo: null;
  salesAgentId: number;
  posOrderNumber: number;
  isPrintedSlip: false;
  isApproved: boolean;
  receiptNumber: null;
  rccode: null;
  dimensionValue: number;
  shippingDimension: null;
  giftWrapPrice: number;
  shipPromotionDiscount: number;
  serialNumber: null;
  isFullFillment: true;
  internalNotes: null;
  returnedStock: number;
  returnedFee: number;
  customerType: null;
  isAmazonuplaod: true;
  shippingLabelWeightNew: number;
  shippingLabelWeight: number;
  cvvResult: string;
  isMailSend: true;
  shippedByStamps: true;
  logoFinalTotal: number;
  lineFinalTotal: number;
  isExport: number;
  isFreight: false;
  inHandDate: number;
  storeCredit: number;
  chargeHostedPaymentID: string;
  chargeConfirmationID: null;
  chargeToken: null;
  sewout: boolean;
  sewoutTotal: number;
  digitalTotal: number;
  brandStoreID: number;
  orderSubType: string;
  empSourceName: string;
  empSourceMedium: string;
  gclid: string;
  isPayLater: boolean;
  orderCheckoutNote: string;
  empSalesRap: string;
  employeeID: number;
  orderShippedNotes: null;
  isDuplicate: boolean;
  duplicateOrderId: number;
  isNavError: boolean;
  navErrorDate: string;
  navErrorDesc: null;
  isNavImport: boolean;
  navImportDate: string;
  isNavShipped: boolean;
  navShippedDate: string;
  fullFillmentStatus: string;
  endUserName: string;
  decorationDate: string;
  addressType: string;
  fees: number;
  cardProcessingFees: number;
  orderSmallRunFee: number;
  orderLogoSetupFee: number;
  isAllowPo: boolean;
  customFieldTotal: number;
  recStatus: string;
  createdDate: string;
  createdBy: number;
  modifiedDate: string;
  modifiedBy: number;
  rowVersion: string;
  location: null;
  ipAddress: null;
  macAddress: null;
}

export const getOrderByOrderNumber = async (orderNumber: string) => {
  const url = `Order/GetOrdersDetailsByOrderNumber/${orderNumber}.json`;

  const res = await SendAsync<_OrderDetails>({
    url: url,
    method: 'GET',
  });
  return res;
};
